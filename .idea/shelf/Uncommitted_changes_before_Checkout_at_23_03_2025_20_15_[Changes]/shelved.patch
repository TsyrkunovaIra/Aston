Index: src/main/java/com/home/project/MyArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.home.project;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\n\r\npublic class MyArrayList {\r\n    /**\r\n     * поле отвечающее за объем динамического массива по умолчанию равное 10 элементам\r\n     */\r\n    private static final int DEFAULT_CAPACITY = 10;\r\n    /**\r\n     * поле отвечающие за храние всех элементов коллекции.\r\n     * поле не задается вручную, а вычисляется программой и менятеся\r\n     * с ростом или уменьшением массива. поле не требует сериализации\r\n     */\r\n    transient Object[] elements; // так же модификатор transient не допускает утечку информации\r\n    // за пределы JVM и упрощает доступ к вложенным классам так как не является приватным\r\n    /**\r\n     * поле, хранящее в себе количество действительно\r\n     * находящихся в массиве элементов\r\n     */\r\n    private int size;\r\n    /**\r\n     * конструктор без параментов, создающий пустой массив на 10 элементов\r\n     */\r\n    public MyArrayList() {\r\n        this.elements = new Object[DEFAULT_CAPACITY];\r\n    }\r\n    /**\r\n     * конструктор создающий списочный массив имеющий началную\r\n     * емкость заданную пользавателем.\r\n     * если начальная емкость (initialCapacity) больше или равно 0,\r\n     * то создается новый массив указанного размера.\r\n     * Если initialCapacity меньше 0, то генерируется исключение\r\n     * IIIegalArgumentException\r\n     */\r\n    public MyArrayList(int initialCapacity) {\r\n        if (initialCapacity >= 0) {\r\n            this.elements = new Object[initialCapacity];\r\n        } else {\r\n            throw new IllegalStateException(\"Начальная емкость (initialCapacity) не может быть меньше или равен нулю\");\r\n        }\r\n    }\r\n    /**\r\n     * возвращает количество элементов в списке\r\n     */\r\n    private int size() {\r\n        return size;\r\n    }\r\n    /**\r\n     * метод увеличения емкости массива, чтобы гарантировать, что она может содержать\r\n     * то количество элементов, которое указано в параметре minCapacity.\r\n     * Если массив заполнен,\r\n     * то срабатывает данный метод, в котором внутреннему массиву\r\n     * присваивается ссылка на новый созданный массив, полученный в результате\r\n     * копирования элементов исходного массива\r\n     */\r\n    private Object[] capacityGrowth(int minCapacity ) {\r\n        int capacity = elements.length;\r\n        if (capacity > 0) {\r\n            Object[] newCapacity = new Object[(elements.length * 2)];\r\n            System.arraycopy(elements, 0, newCapacity, 0, elements.length);\r\n            return newCapacity;\r\n        }else{\r\n            return elements = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\r\n        }}\r\n    /**\r\n     * после увеличения размера массива в конец массива добовляется новый элемент,\r\n     * а текуйщий парамент size увеличиваем на единицу\r\n     */\r\n    private Object[] capacityGrowth() {\r\n        return capacityGrowth(size + 1);\r\n    }\r\n    /**\r\n     * метод добавляет новый элемент в конец массива.\r\n     * внутри метода идет проверка на наличие в массиве места,\r\n     * если нет, то срабатывает метод расширения емкости capacityGrowth.\r\n     * если элемент добавлен возвращает true\r\n     */\r\n    public boolean add(Object object){\r\n        if (size == elements.length){\r\n            elements = capacityGrowth();\r\n        }\r\n        elements[size] = object;\r\n        size++;\r\n        return true;\r\n    }\r\n    /**\r\n     * метод проверка корректности искомого индекса.\r\n     * указанный индекс не может быть больше чем текущее количество элементов массива\r\n     * size или меньше 0\r\n     */\r\n    private int checkingIndex(int index){\r\n        if(index > size || index < 0){\r\n            throw new IndexOutOfBoundsException(\"Элемент не найден!!! \" + arrayLimit(index));\r\n        }\r\n        return index;\r\n    }\r\n    /**\r\n     * выводим предельные значения массива\r\n     */\r\n    private String arrayLimit (int index){\r\n        return \"Количество элементов в массвие: \" + size +\"общий размер массива: \"+ elements.length;\r\n    }\r\n    /**\r\n     * добавляем элемент с указанием индекса ячейки\r\n     * в которую хотим добавть.\r\n     * проверяем наличие искомого элемента в массиве.\r\n     * вставоляем элемент, копируем последующие элементы вправо\r\n     */\r\n    public void add(int index, Object object){\r\n        checkingIndex(index);\r\n        final int i;\r\n        Object[] elements;\r\n        if ((i = size) == (elements = this.elements).length)\r\n            elements = capacityGrowth();\r\n        System.arraycopy(elements, index, elements, index+1, i-index); // увеличиваем массив, сдвигая его с помощью копирования\r\n        elements[index] = object;\r\n        size = i + 1;\r\n    }\r\n    /**\r\n     * получаем элемент по индексу\r\n     */\r\n    public Object get (int index){\r\n        checkingIndex(index);\r\n        return elements[index];\r\n    }\r\n    /**\r\n     * удаление элемента по индексу.\r\n     * проверчем на наличие искомого элемента по индексу,\r\n     * удаляем элемент, путем копирования сдвигаем последующие элементы влево,\r\n     * затем уменьшаем массив на 1\r\n     */\r\n    public Object remove (int index){\r\n        checkingIndex(index);\r\n        Object[] objects = elements;\r\n        elements = new Object[objects.length-1];\r\n        Object object = objects[index];\r\n        System.arraycopy(objects,0,elements,0,index);\r\n        System.arraycopy(objects,index +1, elements, index,objects.length);\r\n        size--;\r\n        return object;\r\n    }\r\n    /**\r\n     * удаляем все элементы из массива.\r\n     * в цикле проходимся по всем\r\n     * элементам массив, присваивая им null\r\n     */\r\n    public void clear(){\r\n        Object[] objects = elements;\r\n        for (int s = size, i =size = 0; i < s; i++)\r\n            objects[i]= null;\r\n    }\r\n    /**\r\n     * сортируем элементы коллекции\r\n     */\r\n    public void sort(Comparator<Object> objectComparator) {\r\n        Arrays.sort(elements, 0, size, objectComparator);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
===================================================================
diff --git a/src/main/java/com/home/project/MyArrayList.java b/src/main/java/com/home/project/MyArrayList.java
--- a/src/main/java/com/home/project/MyArrayList.java	
+++ b/src/main/java/com/home/project/MyArrayList.java	
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
-public class MyArrayList {
+public class MyArrayList   {
     /**
      * поле отвечающее за объем динамического массива по умолчанию равное 10 элементам
      */
